Hey guys! Welcome back to another Project Video. Today, I’m super excited to show you this amazing Mouse Event Listener build using HTML CSS and javascript only. Lets go for the Demo first and then talk about it.

I hope you liked the demo!

It’s a simple one, perfect for beginners.

Let me show you how to set it up in your pc. Firstly copy the GitHub link from the description and open the terminal. I hope you have the git installed in your pc. On terminal go the desired project location where you want to place this project. Now type git clone and then paste the link you copied and press enter. After this you will notice that a new older will be crerated just like in the video. Now open that folder and you will find 3 files in it. Index.html, style.css, script.js. Open the index.html file with the browser. And here you go you will it completely up and running. Give it a try and if you face any error drop them in comments.

Now, let’s move towards the code!
The code structure mainly consists of Three files:

The HTML file named index.html
The CSS file named style.css
The JavaScript file named script.js
It’s a simple structure, but as you advance and learn more, this structure will become more and more complex.



So, let’s begin with the HTML file.
This HTML code creates a simple interactive mouse event tracker that displays the current mouse cursor's X and Y positions and provides a visual effect when the mouse is clicked. 

At the top, it includes the necessary metadata and links to an external CSS file (`style.css`) for styling and a JavaScript file (`script.js`) for functionality.

The page has a title displayed using an `<h1>` tag. Below that, a `<div>` with the class `container` contains two sections labeled `.mouse-event`, each displaying a numeric value using `<span>` tags (`#mouse-x` and `#mouse-y`). These spans are updated dynamically to show the mouse's X and Y coordinates in pixels. Each section also has a descriptive `<h4>` label.

Additionally, there is a `<div>` with the ID `trail-container`, which is intended to create a mouse trail effect when the cursor moves across the screen. The JavaScript will likely generate small elements within this container to simulate a trail effect.

Another `<div>` with the ID `click-message` contains the text `"Mouse Clicked!"`. It has a class called `hidden`, which is likely used to hide it by default. When a mouse click occurs, the JavaScript will remove the `hidden` class to display the message temporarily.

Finally, the `<script>` tag at the bottom links the `script.js` file, where the logic for tracking mouse movements, updating coordinates, generating the mouse trail, and displaying the click message will be implemented.




Now, let’s move forward to the CSS file.
This CSS code styles a simple mouse event tracker application. It provides a visually appealing layout with interactive elements and animations. 

The `body` is styled to occupy the entire viewport height, using `display: flex` to center its contents vertically and horizontally. A blue gradient background is applied using `linear-gradient`, and the font is set to Arial. `overflow: hidden` prevents any content from overflowing the screen.

The main title (`h1`) is centered, with white text and a size of `36px`. It also has a bottom margin to provide space between the title and the interactive content.

The `.container` holds the mouse tracking information and uses `display: flex` with `gap: 20px` to create space between its child elements.

Each `.mouse-event` represents a box displaying the mouse's X and Y coordinates. The boxes have a semi-transparent white background using `rgba`, rounded corners (`border-radius: 12px`), and a subtle blur effect with `backdrop-filter`. The text inside is white, with larger font sizes for the numbers and smaller, light gray text for labels.

The `#trail-container` is a fixed, transparent layer that tracks the mouse's position without blocking interactions using `pointer-events: none`. The `.trail` class defines small circles (12x12 pixels) that follow the mouse pointer. The circles have a white, semi-transparent background and are animated using the `fadeOut` keyframe. This animation gradually scales the circle up to twice its size (`transform: scale(2)`) and reduces its opacity to zero over `0.5 seconds`.

The `#click-message` is a message that displays at the center of the screen when the mouse is clicked. It has a red background with white text, rounded corners, and padding for visual clarity. The message is initially hidden using `opacity: 0` and is smoothly shown using the `transition` property.

The `.hidden` and `.visible` classes control the visibility of the click message. The `.hidden` class keeps the message invisible, while `.visible` makes it appear by setting `opacity: 1`. This effect is handled through JavaScript.



Now, the final and most important part—JavaScript! 
This JavaScript code tracks mouse movements and displays the current X and Y coordinates on the screen using event listeners. When the mouse moves, it updates the values inside the designated HTML elements with the mouse's position. Additionally, it creates a small circular trail element at the mouse's location using `document.createElement` and styles it with a class named `.trail`. The trail is animated using CSS to fade out and disappear within 0.5 seconds, giving a smooth visual effect. The code also includes a `click` event listener that shows a "Mouse Clicked!" message in the center of the screen. The message is displayed by removing the `.hidden` class and adding the `.visible` class. After one second, the message fades out by reversing the class changes using `setTimeout`, creating a temporary visual response to mouse clicks.